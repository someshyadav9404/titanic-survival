{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71fb61d7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:07.970272Z",
     "iopub.status.busy": "2025-08-11T16:05:07.969922Z",
     "iopub.status.idle": "2025-08-11T16:05:09.804405Z",
     "shell.execute_reply": "2025-08-11T16:05:09.803350Z"
    },
    "papermill": {
     "duration": 1.841259,
     "end_time": "2025-08-11T16:05:09.806050",
     "exception": false,
     "start_time": "2025-08-11T16:05:07.964791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/test-file/tested.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d05ff3ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:09.814419Z",
     "iopub.status.busy": "2025-08-11T16:05:09.813954Z",
     "iopub.status.idle": "2025-08-11T16:05:11.716177Z",
     "shell.execute_reply": "2025-08-11T16:05:11.715200Z"
    },
    "papermill": {
     "duration": 1.908318,
     "end_time": "2025-08-11T16:05:11.718002",
     "exception": false,
     "start_time": "2025-08-11T16:05:09.809684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import libraries\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ffd6d5d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.726469Z",
     "iopub.status.busy": "2025-08-11T16:05:11.725951Z",
     "iopub.status.idle": "2025-08-11T16:05:11.755539Z",
     "shell.execute_reply": "2025-08-11T16:05:11.754711Z"
    },
    "papermill": {
     "duration": 0.035415,
     "end_time": "2025-08-11T16:05:11.757138",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.721723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#read csv file\n",
    "dataset = pd.read_csv(\"../input/test-file/tested.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d93247c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.765553Z",
     "iopub.status.busy": "2025-08-11T16:05:11.764717Z",
     "iopub.status.idle": "2025-08-11T16:05:11.788327Z",
     "shell.execute_reply": "2025-08-11T16:05:11.787478Z"
    },
    "papermill": {
     "duration": 0.02932,
     "end_time": "2025-08-11T16:05:11.789903",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.760583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     PassengerId  Survived  Pclass  \\\n",
      "0            892         0       3   \n",
      "1            893         1       3   \n",
      "2            894         0       2   \n",
      "3            895         0       3   \n",
      "4            896         1       3   \n",
      "..           ...       ...     ...   \n",
      "413         1305         0       3   \n",
      "414         1306         1       1   \n",
      "415         1307         0       3   \n",
      "416         1308         0       3   \n",
      "417         1309         0       3   \n",
      "\n",
      "                                             Name     Sex   Age  SibSp  Parch  \\\n",
      "0                                Kelly, Mr. James    male  34.5      0      0   \n",
      "1                Wilkes, Mrs. James (Ellen Needs)  female  47.0      1      0   \n",
      "2                       Myles, Mr. Thomas Francis    male  62.0      0      0   \n",
      "3                                Wirz, Mr. Albert    male  27.0      0      0   \n",
      "4    Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.0      1      1   \n",
      "..                                            ...     ...   ...    ...    ...   \n",
      "413                            Spector, Mr. Woolf    male   NaN      0      0   \n",
      "414                  Oliva y Ocana, Dona. Fermina  female  39.0      0      0   \n",
      "415                  Saether, Mr. Simon Sivertsen    male  38.5      0      0   \n",
      "416                           Ware, Mr. Frederick    male   NaN      0      0   \n",
      "417                      Peter, Master. Michael J    male   NaN      1      1   \n",
      "\n",
      "                 Ticket      Fare Cabin Embarked  \n",
      "0                330911    7.8292   NaN        Q  \n",
      "1                363272    7.0000   NaN        S  \n",
      "2                240276    9.6875   NaN        Q  \n",
      "3                315154    8.6625   NaN        S  \n",
      "4               3101298   12.2875   NaN        S  \n",
      "..                  ...       ...   ...      ...  \n",
      "413           A.5. 3236    8.0500   NaN        S  \n",
      "414            PC 17758  108.9000  C105        C  \n",
      "415  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
      "416              359309    8.0500   NaN        S  \n",
      "417                2668   22.3583   NaN        C  \n",
      "\n",
      "[418 rows x 12 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "print(dataset\n",
    "     )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "42504a6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.797825Z",
     "iopub.status.busy": "2025-08-11T16:05:11.797532Z",
     "iopub.status.idle": "2025-08-11T16:05:11.817304Z",
     "shell.execute_reply": "2025-08-11T16:05:11.816498Z"
    },
    "papermill": {
     "duration": 0.025313,
     "end_time": "2025-08-11T16:05:11.818753",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.793440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0          892         0       3   \n",
       "1          893         1       3   \n",
       "2          894         0       2   \n",
       "3          895         0       3   \n",
       "4          896         1       3   \n",
       "\n",
       "                                           Name     Sex   Age  SibSp  Parch  \\\n",
       "0                              Kelly, Mr. James    male  34.5      0      0   \n",
       "1              Wilkes, Mrs. James (Ellen Needs)  female  47.0      1      0   \n",
       "2                     Myles, Mr. Thomas Francis    male  62.0      0      0   \n",
       "3                              Wirz, Mr. Albert    male  27.0      0      0   \n",
       "4  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.0      1      1   \n",
       "\n",
       "    Ticket     Fare Cabin Embarked  \n",
       "0   330911   7.8292   NaN        Q  \n",
       "1   363272   7.0000   NaN        S  \n",
       "2   240276   9.6875   NaN        Q  \n",
       "3   315154   8.6625   NaN        S  \n",
       "4  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3ea04804",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.827118Z",
     "iopub.status.busy": "2025-08-11T16:05:11.826836Z",
     "iopub.status.idle": "2025-08-11T16:05:11.834200Z",
     "shell.execute_reply": "2025-08-11T16:05:11.833351Z"
    },
    "papermill": {
     "duration": 0.013261,
     "end_time": "2025-08-11T16:05:11.835729",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.822468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#performing EDA\n",
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4cc44c85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.844561Z",
     "iopub.status.busy": "2025-08-11T16:05:11.844221Z",
     "iopub.status.idle": "2025-08-11T16:05:11.855679Z",
     "shell.execute_reply": "2025-08-11T16:05:11.854707Z"
    },
    "papermill": {
     "duration": 0.017397,
     "end_time": "2025-08-11T16:05:11.857051",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.839654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/193312698.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  dataset[\"Age\"].fillna(dataset[\"Age\"].median() , inplace=True)\n",
      "/tmp/ipykernel_13/193312698.py:7: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  dataset[\"Fare\"].fillna(dataset[\"Fare\"].median(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "#to fill the ages we need to find the median oof the dataset as tt bwill be reasonable compares to  mean if there is an outlier\n",
    "\n",
    "dataset[\"Age\"].fillna(dataset[\"Age\"].median() , inplace=True)\n",
    "#inplace is used to get the medaian in thhe same dataset . not in new series\n",
    "\n",
    "# Fill missing Fare with median\n",
    "dataset[\"Fare\"].fillna(dataset[\"Fare\"].median(), inplace=True)\n",
    "\n",
    "# Drop Cabin column (too many missing values)\n",
    "dataset.drop(columns=[\"Cabin\"], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c3154041",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.865912Z",
     "iopub.status.busy": "2025-08-11T16:05:11.865604Z",
     "iopub.status.idle": "2025-08-11T16:05:11.876096Z",
     "shell.execute_reply": "2025-08-11T16:05:11.875354Z"
    },
    "papermill": {
     "duration": 0.016938,
     "end_time": "2025-08-11T16:05:11.877762",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.860824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#now  i  need to change the  dataset from categorical to numerical\n",
    "dataset[\"Sex\"] = dataset[\"Sex\"].map({\"male\":0,\"female\":1})\n",
    "dataset[\"Embarked\"].unique()\n",
    "dataset[\"Embarked\"] = dataset[\"Embarked\"].map({\"Q\":1,\"S\":2,\"C\":3})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be2cfeee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:11.886980Z",
     "iopub.status.busy": "2025-08-11T16:05:11.886663Z",
     "iopub.status.idle": "2025-08-11T16:05:12.532052Z",
     "shell.execute_reply": "2025-08-11T16:05:12.531100Z"
    },
    "papermill": {
     "duration": 0.652716,
     "end_time": "2025-08-11T16:05:12.534478",
     "exception": false,
     "start_time": "2025-08-11T16:05:11.881762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset.describe()\n",
    "# Compute the correlation matrix\n",
    "corr = dataset.corr(numeric_only=True)  # only numeric columns\n",
    "\n",
    "# Create a heatmap\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
    "\n",
    "plt.title(\"Correlation Matrix Heatmap\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dae28a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:12.546615Z",
     "iopub.status.busy": "2025-08-11T16:05:12.546262Z",
     "iopub.status.idle": "2025-08-11T16:05:12.552266Z",
     "shell.execute_reply": "2025-08-11T16:05:12.551309Z"
    },
    "papermill": {
     "duration": 0.013785,
     "end_time": "2025-08-11T16:05:12.553762",
     "exception": false,
     "start_time": "2025-08-11T16:05:12.539977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#loading data to train\n",
    "X = dataset[[\"PassengerId\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]]#two brackets fr 2d frame \n",
    "y = dataset[\"Survived\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0e5fa816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:12.567105Z",
     "iopub.status.busy": "2025-08-11T16:05:12.566014Z",
     "iopub.status.idle": "2025-08-11T16:05:12.575228Z",
     "shell.execute_reply": "2025-08-11T16:05:12.574187Z"
    },
    "papermill": {
     "duration": 0.016831,
     "end_time": "2025-08-11T16:05:12.576694",
     "exception": false,
     "start_time": "2025-08-11T16:05:12.559863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     PassengerId  Pclass  Sex   Age  SibSp  Parch      Fare  Embarked\n",
      "0            892       3    0  34.5      0      0    7.8292         1\n",
      "1            893       3    1  47.0      1      0    7.0000         2\n",
      "2            894       2    0  62.0      0      0    9.6875         1\n",
      "3            895       3    0  27.0      0      0    8.6625         2\n",
      "4            896       3    1  22.0      1      1   12.2875         2\n",
      "..           ...     ...  ...   ...    ...    ...       ...       ...\n",
      "413         1305       3    0  27.0      0      0    8.0500         2\n",
      "414         1306       1    1  39.0      0      0  108.9000         3\n",
      "415         1307       3    0  38.5      0      0    7.2500         2\n",
      "416         1308       3    0  27.0      0      0    8.0500         2\n",
      "417         1309       3    0  27.0      1      1   22.3583         3\n",
      "\n",
      "[418 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "265aa7b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:12.588845Z",
     "iopub.status.busy": "2025-08-11T16:05:12.588033Z",
     "iopub.status.idle": "2025-08-11T16:05:12.594040Z",
     "shell.execute_reply": "2025-08-11T16:05:12.592943Z"
    },
    "papermill": {
     "duration": 0.013702,
     "end_time": "2025-08-11T16:05:12.595580",
     "exception": false,
     "start_time": "2025-08-11T16:05:12.581878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      0\n",
      "1      1\n",
      "2      0\n",
      "3      0\n",
      "4      1\n",
      "      ..\n",
      "413    0\n",
      "414    1\n",
      "415    0\n",
      "416    0\n",
      "417    0\n",
      "Name: Survived, Length: 418, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e7ebbafd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:12.607259Z",
     "iopub.status.busy": "2025-08-11T16:05:12.606963Z",
     "iopub.status.idle": "2025-08-11T16:05:12.915930Z",
     "shell.execute_reply": "2025-08-11T16:05:12.915156Z"
    },
    "papermill": {
     "duration": 0.316743,
     "end_time": "2025-08-11T16:05:12.917631",
     "exception": false,
     "start_time": "2025-08-11T16:05:12.600888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#split data for training and testing\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8420d47f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:12.929906Z",
     "iopub.status.busy": "2025-08-11T16:05:12.929597Z",
     "iopub.status.idle": "2025-08-11T16:05:13.206724Z",
     "shell.execute_reply": "2025-08-11T16:05:13.205904Z"
    },
    "papermill": {
     "duration": 0.285441,
     "end_time": "2025-08-11T16:05:13.208594",
     "exception": false,
     "start_time": "2025-08-11T16:05:12.923153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=50)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=50)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calling model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression(max_iter = 50)\n",
    "#training on dataset\n",
    "model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "00aa3316",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T16:05:13.231072Z",
     "iopub.status.busy": "2025-08-11T16:05:13.230490Z",
     "iopub.status.idle": "2025-08-11T16:05:13.254318Z",
     "shell.execute_reply": "2025-08-11T16:05:13.253547Z"
    },
    "papermill": {
     "duration": 0.037406,
     "end_time": "2025-08-11T16:05:13.256374",
     "exception": false,
     "start_time": "2025-08-11T16:05:13.218968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "[[50  0]\n",
      " [ 0 34]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        50\n",
      "           1       1.00      1.00      1.00        34\n",
      "\n",
      "    accuracy                           1.00        84\n",
      "   macro avg       1.00      1.00      1.00        84\n",
      "weighted avg       1.00      1.00      1.00        84\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "y_pred = model.predict(X_val)\n",
    "print(\"Accuracy:\", accuracy_score(y_val, y_pred))\n",
    "#accuracy tells us about how our model perform on a dataseet \n",
    "print(confusion_matrix(y_val, y_pred))\n",
    "#confusion matrix tells us about how many predictions are actual positive and actual negative , false positive and false negative\n",
    "                    # predicted positive         predicted negative\n",
    "# actual positive      true positive              false negative\n",
    "# actual negative      false positive             true negative\n",
    "\n",
    "print(classification_report(y_val, y_pred))\n",
    "\n",
    "# precision for prediction\n",
    "# precision = tp/(tp+fp)\n",
    "# recall = tp/(tp+fn)\n",
    "# f1 score = 2*precision*recall/(precision+recall)\n",
    "# f1 score takes care of precision and recall at the same time, evaluates overall performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75cffda9",
   "metadata": {
    "papermill": {
     "duration": 0.008772,
     "end_time": "2025-08-11T16:05:13.274517",
     "exception": false,
     "start_time": "2025-08-11T16:05:13.265745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 826163,
     "sourceId": 2879186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.805985,
   "end_time": "2025-08-11T16:05:14.004424",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-11T16:05:03.198439",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
